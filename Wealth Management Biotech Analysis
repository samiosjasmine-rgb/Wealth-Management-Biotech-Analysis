{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOQ4GBC8UD3Pl/M5ooeV9cH",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/samiosjasmine-rgb/Wealth-Management-Biotech-Analysis/blob/main/Wealth%20Management%20Biotech%20Analysis\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "FLHnx_xKs8Wc"
      },
      "outputs": [],
      "source": [
        "import os\n",
        "from datetime import datetime\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import yfinance as yf\n",
        "\n",
        "TICKERS = [\"XLV\", \"IBB\", \"SPY\"]\n",
        "START_DATE = \"2020-01-01\"\n",
        "END_DATE = None\n",
        "RISK_FREE_RATE = 0.02\n",
        "ROLLING_VOL_WINDOW = 90\n",
        "OUTPUT_DIR = \"outputs\"\n",
        "NORMALIZE_BASE = 100.0\n",
        "\n",
        "os.makedirs(OUTPUT_DIR, exist_ok=True)\n",
        "\n",
        "def download_prices(tickers, start, end=None):\n",
        "    data = yf.download(tickers, start=start, end=end, auto_adjust=False, progress=False)\n",
        "    prices = data[\"Adj Close\"] if \"Adj Close\" in data.columns else data[\"Close\"]\n",
        "    if isinstance(prices, pd.Series):\n",
        "        prices = prices.to_frame()\n",
        "    return prices.dropna(how=\"all\")\n",
        "\n",
        "def daily_returns(prices):\n",
        "    return prices.pct_change().dropna(how=\"all\")\n",
        "\n",
        "def cumulative_returns(daily):\n",
        "    return (1.0 + daily).cumprod()\n",
        "\n",
        "def ann_return(daily, td=252):\n",
        "    cum = (1.0 + daily).prod()\n",
        "    n = daily.shape[0]\n",
        "    return cum ** (td / n) - 1.0\n",
        "\n",
        "def ann_vol(daily, td=252):\n",
        "    return daily.std(ddof=0) * np.sqrt(td)\n",
        "\n",
        "def sharpe(a_ret, a_vol, rf):\n",
        "    return np.nan if a_vol == 0 or np.isnan(a_vol) else (a_ret - rf) / a_vol\n",
        "\n",
        "def max_drawdown(growth):\n",
        "    rm = growth.cummax()\n",
        "    dd = growth / rm - 1.0\n",
        "    t = dd.idxmin()\n",
        "    p = growth.loc[:t].idxmax()\n",
        "    return dd.min(), p, t\n",
        "\n",
        "def summary_table(daily, cum, rf):\n",
        "    rows = []\n",
        "    for t in daily.columns:\n",
        "        dr = daily[t].dropna()\n",
        "        if dr.empty:\n",
        "            continue\n",
        "        ar = ann_return(dr)\n",
        "        av = ann_vol(dr)\n",
        "        sh = sharpe(ar, av, rf)\n",
        "        mdd, p, q = max_drawdown(cum[t].dropna())\n",
        "        rows.append({\n",
        "            \"Ticker\": t,\n",
        "            \"Annualized Return\": ar,\n",
        "            \"Annualized Volatility\": av,\n",
        "            \"Sharpe\": sh,\n",
        "            \"Max Drawdown\": mdd,\n",
        "            \"MDD Peak Date\": p,\n",
        "            \"MDD Trough Date\": q,\n",
        "            \"Obs (days)\": dr.shape[0],\n",
        "        })\n",
        "    return pd.DataFrame(rows).set_index(\"Ticker\").sort_values(\"Annualized Return\", ascending=False)\n",
        "\n",
        "def plot_normalized(prices, outdir, base=100.0):\n",
        "    norm = prices / prices.iloc[0] * base\n",
        "    plt.figure(figsize=(10,6))\n",
        "    for t in norm.columns:\n",
        "        plt.plot(norm.index, norm[t], label=t)\n",
        "    plt.title(f\"Normalized Price (Base={int(base)})\")\n",
        "    plt.xlabel(\"Date\"); plt.ylabel(\"Index Level\"); plt.legend()\n",
        "    p = os.path.join(outdir, \"01_normalized_price.png\")\n",
        "    plt.tight_layout(); plt.savefig(p, dpi=150); plt.close(); return p\n",
        "\n",
        "def plot_cum(cum, outdir):\n",
        "    plt.figure(figsize=(10,6))\n",
        "    for t in cum.columns:\n",
        "        plt.plot(cum.index, cum[t], label=t)\n",
        "    plt.title(\"Cumulative Return (Growth of 1)\")\n",
        "    plt.xlabel(\"Date\"); plt.ylabel(\"Growth of 1\"); plt.legend()\n",
        "    p = os.path.join(outdir, \"02_cumulative_return.png\")\n",
        "    plt.tight_layout(); plt.savefig(p, dpi=150); plt.close(); return p\n",
        "\n",
        "def plot_roll_vol(daily, outdir, window=90):\n",
        "    rv = daily.rolling(window).std() * np.sqrt(252)\n",
        "    plt.figure(figsize=(10,6))\n",
        "    for t in rv.columns:\n",
        "        plt.plot(rv.index, rv[t], label=t)\n",
        "    plt.title(f\"Rolling {window}-Day Annualized Volatility\")\n",
        "    plt.xlabel(\"Date\"); plt.ylabel(\"Annualized Volatility\"); plt.legend()\n",
        "    p = os.path.join(outdir, \"03_rolling_volatility.png\")\n",
        "    plt.tight_layout(); plt.savefig(p, dpi=150); plt.close(); return p\n",
        "\n",
        "def plot_hist(daily, outdir):\n",
        "    paths = {}\n",
        "    for t in daily.columns:\n",
        "        plt.figure(figsize=(8,5))\n",
        "        plt.hist(daily[t].dropna(), bins=50)\n",
        "        plt.title(f\"Histogram of Daily Returns â€” {t}\")\n",
        "        plt.xlabel(\"Daily Return\"); plt.ylabel(\"Frequency\")\n",
        "        p = os.path.join(outdir, f\"04_histogram_{t}.png\")\n",
        "        plt.tight_layout(); plt.savefig(p, dpi=150); plt.close(); paths[t] = p\n",
        "    return paths\n",
        "\n",
        "def plot_risk_return(summary, outdir, rf):\n",
        "    plt.figure(figsize=(8,6))\n",
        "    x = summary[\"Annualized Volatility\"]; y = summary[\"Annualized Return\"]\n",
        "    for t in summary.index:\n",
        "        plt.scatter(x.loc[t], y.loc[t]); plt.annotate(t, (x.loc[t], y.loc[t]), xytext=(5,5), textcoords=\"offset points\")\n",
        "    plt.axhline(y=rf, linestyle=\"--\")\n",
        "    plt.title(\"Risk vs Return (Annualized)\")\n",
        "    plt.xlabel(\"Annualized Volatility\"); plt.ylabel(\"Annualized Return\")\n",
        "    p = os.path.join(outdir, \"05_risk_vs_return.png\")\n",
        "    plt.tight_layout(); plt.savefig(p, dpi=150); plt.close(); return p\n",
        "\n",
        "def main():\n",
        "    end = END_DATE or datetime.today().strftime(\"%Y-%m-%d\")\n",
        "    prices = download_prices(TICKERS, START_DATE, end)\n",
        "    daily = daily_returns(prices)\n",
        "    cum = cumulative_returns(daily)\n",
        "    summary = summary_table(daily, cum, RISK_FREE_RATE)\n",
        "    summary.to_csv(os.path.join(OUTPUT_DIR, \"summary_metrics.csv\"))\n",
        "    plot_normalized(prices, OUTPUT_DIR, NORMALIZE_BASE)\n",
        "    plot_cum(cum, OUTPUT_DIR)\n",
        "    plot_roll_vol(daily, OUTPUT_DIR, ROLLING_VOL_WINDOW)\n",
        "    plot_hist(daily, OUTPUT_DIR)\n",
        "    plot_risk_return(summary, OUTPUT_DIR, RISK_FREE_RATE)\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "id": "5OdB140s5ma-"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}